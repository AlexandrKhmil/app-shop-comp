--------------------------------------------------------------------------------
-- add new account ------------------------------------------------------------
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION account_add_func(
  arg_email CHARACTER VARYING,
  arg_password CHARACTER VARYING
)
  RETURNS INTEGER
  LANGUAGE plpgsql
AS $$
  DECLARE
    is_exists BOOLEAN;
  BEGIN
    is_exists = (SELECT COUNT(1) > 0 
                FROM account
                WHERE email = arg_email);
    IF (is_exists) THEN
      RAISE 'User with this email exists!';
    END IF;
    INSERT INTO account (email, password)
    VALUES (arg_email, arg_password);
    RETURN currval('account_id_seq');
  END;
$$;

--------------------------------------------------------------------------------
-- rate product ----------------------------------------------------------------
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION product_rate_func(
  arg_account_id INTEGER,
  arg_product_link CHARACTER VARYING,
  arg_value INTEGER
)
  RETURNS VOID
  LANGUAGE plpgsql
AS $$
  DECLARE
    var_id INTEGER;
    is_exists BOOLEAN;
  BEGIN
    var_id = (SELECT id FROM product
              WHERE link = arg_product_link);
    is_exists = (SELECT COUNT(1) > 0 
                 FROM rate
                 WHERE account_id = arg_account_id 
                   AND product_id = var_id);
    IF (is_exists) THEN
      UPDATE rate 
      SET value = arg_value
      WHERE account_id = arg_account_id 
        AND product_id = var_id;
    ELSE
      INSERT INTO rate (product_id, account_id, value)
      VALUES(var_id, arg_account_id, arg_value); 
    END IF;
  END;
$$;

--------------------------------------------------------------------------------
-- add review ------------------------------------------------------------------
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION review_add_func(
  arg_product_link CHARACTER VARYING,
  arg_account_id INTEGER,
  arg_title CHARACTER VARYING,
  arg_text TEXT
)
  RETURNS VOID
  LANGUAGE plpgsql
AS $$
  DECLARE
    var_product_id INTEGER;
    var_is_exists BOOLEAN;
  BEGIN
    var_product_id = (SELECT id FROM product
                      WHERE link = arg_product_link);

    var_is_exists = (SELECT COUNT(1) > 0 FROM review
                     WHERE product_id = var_product_id 
                       AND account_id = arg_account_id);

    IF (var_is_exists) THEN
      UPDATE review 
      SET title = arg_title, text = arg_text
  	  WHERE account_id = arg_account_id AND product_id = var_product_id;
    ELSE
      INSERT INTO review (product_id, account_id, title, text)
      VALUES(var_product_id, arg_account_id, arg_title, arg_text);
    END IF;
  END;
$$;

--------------------------------------------------------------------------------
-- vote review -----------------------------------------------------------------
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION review_vote_func(
  arg_review_id INTEGER,
  arg_account_id INTEGER,
  arg_vote BOOLEAN
)
  RETURNS VOID
  LANGUAGE plpgsql
AS $$
  DECLARE
    var_is_exists BOOLEAN;
  BEGIN
    var_is_exists = (SELECT COUNT(1) > 0 FROM review_vote
                     WHERE review_id = arg_review_id 
                       AND account_id = arg_account_id);

    IF (var_is_exists) THEN
      UPDATE review_vote SET vote = arg_vote
  	  WHERE account_id = arg_account_id AND review_id = arg_review_id;
    ELSE
      INSERT INTO review_vote (review_id, account_id, vote)
      VALUES(arg_review_id, arg_account_id, arg_vote);
    END IF;
  END;
$$;

--------------------------------------------------------------------------------
-- order add -------------------------------------------------------------------
--------------------------------------------------------------------------------
-- '[{"product_id": "1", "quantity": "10"}]'::json 

CREATE OR REPLACE FUNCTION order_add_func(
  arg_account_id INTEGER,
  arg_product_list JSON,
  arg_code CHARACTER VARYING
)
  RETURNS VOID
  LANGUAGE plpgsql
AS $$
  DECLARE
    var_total NUMERIC(10, 2);
    var_order_id INTEGER;
  BEGIN
    CREATE TEMP TABLE temp_cart AS
      (SELECT * FROM json_to_recordset(arg_product_list) 
         AS x(product_id INTEGER, quantity INTEGER));

    var_total = (SELECT SUM(sum_product) AS sum_total
                 FROM (SELECT SUM(quantity * p.price) AS sum_product
                       FROM temp_cart
                         INNER JOIN product AS p ON product_id = p.id
                       GROUP BY p.id) AS list_product_sum);

    INSERT INTO customer_order (account_id, total_price, code)
    VALUES (arg_account_id, var_total, arg_code);

    var_order_id = currval('customer_order_id_seq');

    INSERT INTO order_has_product
    SELECT var_order_id AS order_id, * FROM temp_cart;

    DROP TABLE temp_cart;
  END;
$$;